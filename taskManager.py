import streamlit as st
import pandas as pd
from datetime import datetime

class TaskManager:
    def __init__(self):
        # рдпрджрд┐ "tasks" session_state рдореЗрдВ рдирд╣реАрдВ рд╣реИ, рддреЛ рдЗрд╕реЗ рдПрдХ рдЦрд╛рд▓реА рд╕реВрдЪреА рд╕реЗ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ
        if "tasks" not in st.session_state:
            st.session_state.tasks = []  
        
        self.tasks = st.session_state.tasks  # рд╕рддреНрд░ рд╕реНрдерд┐рддрд┐ рд╕реЗ рдЯрд╛рд╕реНрдХ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        self.setup_ui()  # UI рд╕реЗрдЯрдЕрдк рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ
    
    def setup_ui(self):
        st.title("ЁЯУЭ рдЯрд╛рд╕реНрдХ рдореИрдиреЗрдЬрдореЗрдВрдЯ рд╕рд┐рд╕реНрдЯрдо")  # рдЯрд╛рдЗрдЯрд▓ рд╕реЗрдЯ рдХрд░реЗрдВ
        
        # рдЯрд╛рд╕реНрдХ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдлреЙрд░реНрдо рдмрдирд╛рдПрдВ
        with st.form("task_form"):
            title = st.text_input("ЁЯУМ рд╢реАрд░реНрд╖рдХ")  # рдЯрд╛рд╕реНрдХ рдХрд╛ рд╢реАрд░реНрд╖рдХ
            desc = st.text_area("ЁЯУЭ рд╡рд┐рд╡рд░рдг")  # рдЯрд╛рд╕реНрдХ рдХрд╛ рд╡рд┐рд╡рд░рдг
            priority = st.selectbox("тЪб рдкреНрд░рд╛рдердорд┐рдХрддрд╛", ["рдЙрдЪреНрдЪ", "рдордзреНрдпрдо", "рдирд┐рдореНрди"])  # рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рд╕реЗрд▓реЗрдХреНрдЯ рдХрд░реЗрдВ
            deadline = st.date_input("ЁЯУЕ рд╕рдордп рд╕реАрдорд╛")  # рд╕рдордп рд╕реАрдорд╛ рдЪреБрдиреЗрдВ
            category = st.text_input("ЁЯУВ рд╢реНрд░реЗрдгреА")  # рд╢реНрд░реЗрдгреА рдЗрдирдкреБрдЯ рдХрд░реЗрдВ
            submit = st.form_submit_button("тЮХ рдЯрд╛рд╕реНрдХ рдЬреЛрдбрд╝реЗрдВ")  # рдЯрд╛рд╕реНрдХ рдЬреЛрдбрд╝рдиреЗ рдХрд╛ рдмрдЯрди
            
            if submit:
                self.add_task(title, desc, priority, deadline, category)  # рдЯрд╛рд╕реНрдХ рдЬреЛрдбрд╝рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди рдХреЙрд▓ рдХрд░реЗрдВ
        
        # рдпрджрд┐ рдЯрд╛рд╕реНрдХ рдЙрдкрд▓рдмреНрдз рд╣реИрдВ, рддреЛ рдЙрдиреНрд╣реЗрдВ рдЯреЗрдмрд▓ рдореЗрдВ рджрд┐рдЦрд╛рдПрдВ
        if self.tasks:
            df = pd.DataFrame(self.tasks)  # рдбреЗрдЯрд╛ рдХреЛ DataFrame рдореЗрдВ рдмрджрд▓реЗрдВ
            df = df.sort_values(by="deadline")  # рд╕рдордп рд╕реАрдорд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╕реЙрд░реНрдЯ рдХрд░реЗрдВ
            st.write("### ЁЯЧВя╕П рдЖрдкрдХреА рдЯрд╛рд╕реНрдХ рд▓рд┐рд╕реНрдЯ")
            st.dataframe(df)  # рдЯрд╛рд╕реНрдХ рдХреЛ рдЯреЗрдмрд▓ рдХреЗ рд░реВрдк рдореЗрдВ рджрд┐рдЦрд╛рдПрдВ
            
            # рдЯрд╛рд╕реНрдХ рд╣рдЯрд╛рдиреЗ рдХрд╛ рдСрдкреНрд╢рди рджреЗрдВ
            task_to_delete = st.selectbox("ЁЯЧСя╕П рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЯрд╛рд╕реНрдХ рдЪреБрдиреЗрдВ", df["title"].tolist() if not df.empty else [])
            if st.button("тЭМ рдЯрд╛рд╕реНрдХ рд╣рдЯрд╛рдПрдВ") and task_to_delete:
                self.delete_task(task_to_delete)  # рдЯрд╛рд╕реНрдХ рд╣рдЯрд╛рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди рдХреЙрд▓ рдХрд░реЗрдВ

    def add_task(self, title, desc, priority, deadline, category):
        """рдирдпрд╛ рдЯрд╛рд╕реНрдХ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдлрдВрдХреНрд╢рди"""
        if not title or not deadline:
            st.error("тЪая╕П рд╢реАрд░реНрд╖рдХ рдФрд░ рд╕рдордп рд╕реАрдорд╛ рдЖрд╡рд╢реНрдпрдХ рд╣реИрдВ!")  # рдпрджрд┐ рдХреЛрдИ рдЖрд╡рд╢реНрдпрдХ рдлреАрд▓реНрдб рдЦрд╛рд▓реА рд╣реИ рддреЛ рддреНрд░реБрдЯрд┐ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ
            return
        
        # рдЯрд╛рд╕реНрдХ рдХреЛ рд╕рддреНрд░ рд╕реНрдерд┐рддрд┐ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ
        self.tasks.append({
            "title": title,
            "desc": desc,
            "priority": priority,
            "deadline": deadline.strftime("%Y-%m-%d"),  # рд╕рдордп рд╕реАрдорд╛ рдХреЛ рд╕реНрдЯреНрд░рд┐рдВрдЧ рдореЗрдВ рдмрджрд▓реЗрдВ
            "category": category
        })
        
        st.session_state.tasks = self.tasks  # рд╕рддреНрд░ рд╕реНрдерд┐рддрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
        st.success("тЬЕ рдЯрд╛рд╕реНрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝реА рдЧрдИ!")  # рд╕рдлрд▓рддрд╛ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ

    def delete_task(self, title):
        """рдЪрдпрдирд┐рдд рдЯрд╛рд╕реНрдХ рдХреЛ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдлрдВрдХреНрд╢рди"""
        self.tasks = [task for task in self.tasks if task["title"] != title]  # рд╕реВрдЪреА рд╕реЗ рдЯрд╛рд╕реНрдХ рд╣рдЯрд╛рдПрдВ
        st.session_state.tasks = self.tasks  # рд╕рддреНрд░ рд╕реНрдерд┐рддрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
        st.success("ЁЯЧСя╕П рдЯрд╛рд╕реНрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛рдИ рдЧрдИ!")  # рд╕рдлрд▓рддрд╛ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ

# рдпрджрд┐ рдпрд╣ рд╕реНрдХреНрд░рд┐рдкреНрдЯ рдореБрдЦреНрдп рдлрд╛рдЗрд▓ рдХреЗ рд░реВрдк рдореЗрдВ рдЪрд▓рд╛рдИ рдЬрд╛ рд░рд╣реА рд╣реИ, рддреЛ TaskManager рдХреНрд▓рд╛рд╕ рдХреЛ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ
if __name__ == "__main__":
    TaskManager()